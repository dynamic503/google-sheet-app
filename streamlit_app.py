import streamlit as st
import hashlib
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import time
from datetime import datetime, timedelta
import pandas as pd

# --- ƒê·∫∑t c·∫•u h√¨nh trang ƒë·∫ßu ti√™n ---
st.set_page_config(page_title="Qu·∫£n l√Ω nh·∫≠p li·ªáu - Agribank", page_icon="üíª")

# --- CSS ƒë·ªÉ thi·∫øt k·∫ø giao di·ªán hi·ªán ƒë·∫°i, t√¥ng ƒë·ªè Agribank ---
st.markdown("""
    <style>
    /* Sidebar n·ªÅn */
    .css-1d391kg {
        background-color: #F5F5F5;
    }
    /* N√∫t sidebar */
    .stButton>button {
        width: 100%;
        background-color: #A91B2A;
        color: white;
        border-radius: 8px;
        padding: 10px;
        font-size: 16px;
        font-weight: 500;
        border: none;
        margin-bottom: 5px;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #8B1623;
        color: white;
    }
    /* Tr∆∞·ªùng b·∫Øt bu·ªôc b√¥i ƒë·ªè */
    .required-label {
        color: red;
        font-weight: bold;
    }
    /* Logo v√† ch·ªØ chi nh√°nh */
    .sidebar-logo {
        display: block;
        margin: 0 auto;
        width: 120px;
    }
    .branch-text {
        text-align: center;
        font-size: 14px;
        font-weight: bold;
        color: #333333;
        margin-top: 10px;
    }
    /* N√∫t s·ª≠a nh·ªè trong b·∫£ng */
    .edit-button {
        background-color: #A91B2A;
        color: white;
        border-radius: 5px;
        padding: 5px 10px;
        font-size: 14px;
        border: none;
    }
    .edit-button:hover {
        background-color: #8B1623;
    }
    </style>
""", unsafe_allow_html=True)

# --- K·∫øt n·ªëi Google Sheets ---
def connect_to_gsheets():
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        sheet_id = os.getenv("SHEET_ID")
        
        if not creds_json or not sheet_id:
            st.error("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_CREDENTIALS_JSON ho·∫∑c SHEET_ID")
            return None
        
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        return client.open_by_key(sheet_id)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

# --- ƒê·ªçc c·∫•u h√¨nh t·ª´ sheet Config ---
def get_sheet_config(sh):
    try:
        worksheet = sh.worksheet("Config")
        data = worksheet.get_all_records()
        if not data:
            st.error("Sheet Config tr·ªëng. Vui l√≤ng th√™m d·ªØ li·ªáu v·ªõi c√°c c·ªôt: Sheetname, T√¨m ki·∫øm, Nh·∫≠p, Xem ƒë√£ nh·∫≠p.")
            return []
        return data
    except gspread.exceptions.WorksheetNotFound:
        st.error("Kh√¥ng t√¨m th·∫•y sheet 'Config' trong Google Sheets. Vui l√≤ng t·∫°o sheet 'Config' v·ªõi c√°c c·ªôt: Sheetname, T√¨m ki·∫øm, Nh·∫≠p, Xem ƒë√£ nh·∫≠p.")
        return []
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc sheet Config: {e}")
        return []

# --- L·∫•y danh s√°ch sheet nh·∫≠p li·ªáu t·ª´ Config ---
def get_input_sheets(sh):
    try:
        config = get_sheet_config(sh)
        if not config:
            return []
        sheets = [row['Sheetname'] for row in config if row.get('Nh·∫≠p') == 1]
        existing_sheets = [ws.title for ws in sh.worksheets()]
        valid_sheets = [s for s in sheets if s in existing_sheets]
        if not valid_sheets:
            st.warning("Kh√¥ng t√¨m th·∫•y sheet nh·∫≠p li·ªáu n√†o h·ª£p l·ªá theo c·∫•u h√¨nh Config.")
        return valid_sheets
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch sheet nh·∫≠p li·ªáu: {e}")
        return []

# --- L·∫•y danh s√°ch sheet tra c·ª©u t·ª´ Config ---
def get_lookup_sheets(sh):
    try:
        config = get_sheet_config(sh)
        if not config:
            return []
        sheets = [row['Sheetname'] for row in config if row.get('T√¨m ki·∫øm') == 1]
        existing_sheets = [ws.title for ws in sh.worksheets()]
        valid_sheets = [s for s in sheets if s in existing_sheets]
        if not valid_sheets:
            st.warning("Kh√¥ng t√¨m th·∫•y sheet tra c·ª©u n√†o h·ª£p l·ªá theo c·∫•u h√¨nh Config.")
        return valid_sheets
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch sheet tra c·ª©u: {e}")
        return []

# --- L·∫•y danh s√°ch sheet xem ƒë√£ nh·∫≠p t·ª´ Config ---
def get_view_sheets(sh):
    try:
        config = get_sheet_config(sh)
        if not config:
            return []
        sheets = [row['Sheetname'] for row in config if row.get('Xem ƒë√£ nh·∫≠p') == 1]
        existing_sheets = [ws.title for ws in sh.worksheets()]
        valid_sheets = [s for s in sheets if s in existing_sheets]
        if not valid_sheets:
            st.warning("Kh√¥ng t√¨m th·∫•y sheet xem d·ªØ li·ªáu n√†o h·ª£p l·ªá theo c·∫•u h√¨nh Config.")
        return valid_sheets
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch sheet xem ƒë√£ nh·∫≠p: {e}")
        return []

# --- Ki·ªÉm tra xem chu·ªói c√≥ m√£ h√≥a SHA256 ch∆∞a ---
def is_hashed(pw):
    return isinstance(pw, str) and len(pw) == 64 and re.fullmatch(r'[0-9a-fA-F]+', pw)

# --- H√†m m√£ h√≥a m·∫≠t kh·∫©u ---
def hash_password(password):
    return hashlib.sha256(str(password).encode('utf-8')).hexdigest() if password else ''

# --- Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u ---
def is_strong_password(password):
    if len(str(password)) < 8:
        return False, "M·∫≠t kh·∫©u ph·∫£i d√†i √≠t nh·∫•t 8 k√Ω t·ª±."
    if not re.search(r'[A-Z]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ c√°i in hoa."
    if not re.search(r'[0-9]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ªë."
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát."
    return True, ""

# --- L·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ sheet "User" ---
def get_users(sh):
    try:
        worksheet = sh.worksheet("User")
        data = worksheet.get_all_records()
        return data
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")
        return []

# --- X√°c th·ª±c ng∆∞·ªùi d√πng ---
def check_login(sh, username, password):
    if not username or not password:
        st.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        return None, False
    users = get_users(sh)
    hashed_input = hash_password(password)
    for user in users:
        stored_password = str(user.get('Password', ''))
        if user.get('Username') == username:
            if stored_password == password:
                return user.get('Role', 'User'), True  # True: b·∫Øt bu·ªôc ƒë·ªïi m·∫≠t kh·∫©u
            if stored_password == hashed_input:
                return user.get('Role', 'User'), False  # False: kh√¥ng c·∫ßn ƒë·ªïi
    return None, False

# --- ƒê·ªïi m·∫≠t kh·∫©u ---
def change_password(sh, username, old_pw, new_pw):
    try:
        worksheet = sh.worksheet("User")
        data = worksheet.get_all_records()
        hashed_old = hash_password(old_pw)
        hashed_new = hash_password(new_pw)

        for idx, user in enumerate(data):
            stored_password = str(user.get('Password', ''))
            if user.get('Username') == username and (stored_password == old_pw or stored_password == hashed_old):
                worksheet.update_cell(idx + 2, 2, hashed_new)
                return True
        return False
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: {e}")
        return False

# --- L·∫•y ti√™u ƒë·ªÅ c·ªôt t·ª´ sheet, t√°ch c·ªôt b·∫Øt bu·ªôc (*) ---
def get_columns(sh, sheet_name):
    try:
        worksheet = sh.worksheet(sheet_name)
        headers = worksheet.row_values(1)
        required_columns = [h for h in headers if h.endswith('*')]
        optional_columns = [h for h in headers if not h.endswith('*') and h not in ["Nguoi_nhap", "Thoi_gian_nhap"]]
        return required_columns, optional_columns
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y ti√™u ƒë·ªÅ c·ªôt: {e}")
        return [], []

# --- Ki·ªÉm tra v√† th√™m c·ªôt Nguoi_nhap, Thoi_gian_nhap n·∫øu ch∆∞a c√≥ ---
def ensure_columns(sh, sheet_name):
    try:
        worksheet = sh.worksheet(sheet_name)
        headers = worksheet.row_values(1)
        if "Nguoi_nhap" not in headers:
            headers.append("Nguoi_nhap")
            worksheet.update_cell(1, len(headers), "Nguoi_nhap")
        if "Thoi_gian_nhap" not in headers:
            headers.append("Thoi_gian_nhap")
            worksheet.update_cell(1, len(headers), "Thoi_gian_nhap")
        return headers
    except Exception as e:
        st.error(f"L·ªói khi ki·ªÉm tra/th√™m c·ªôt: {e}")
        return []

# --- Th√™m d·ªØ li·ªáu v√†o sheet ---
def add_data_to_sheet(sh, sheet_name, data, username):
    try:
        worksheet = sh.worksheet(sheet_name)
        headers = ensure_columns(sh, sheet_name)
        row_data = [data.get(header.rstrip('*'), '') for header in headers[:-2]]
        row_data.append(username)
        row_data.append(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        worksheet.append_row(row_data)
        return True
    except Exception as e:
        st.error(f"L·ªói khi nh·∫≠p li·ªáu: {e}")
        return False

# --- C·∫≠p nh·∫≠t b·∫£n ghi trong sheet ---
def update_data_in_sheet(sh, sheet_name, row_idx, data, username):
    try:
        worksheet = sh.worksheet(sheet_name)
        headers = ensure_columns(sh, sheet_name)
        row_data = [data.get(header.rstrip('*'), '') for header in headers[:-2]]
        row_data.append(username)
        row_data.append(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        worksheet.update(f"A{row_idx + 2}:{chr(65 + len(headers) - 1)}{row_idx + 2}", [row_data])
        return True
    except Exception as e:
        st.error(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {e}")
        return False

# --- L·∫•y d·ªØ li·ªáu ƒë√£ nh·∫≠p, h·ªó tr·ª£ admin th·∫•y t·∫•t c·∫£ ---
def get_user_data(sh, sheet_name, username, role, start_date=None, end_date=None, keyword=None):
    try:
        worksheet = sh.worksheet(sheet_name)
        data = worksheet.get_all_records()
        headers = worksheet.row_values(1)
        filtered_data = []
        for idx, row in enumerate(data):
            if role.lower() == 'admin' or row.get("Nguoi_nhap") == username:
                if start_date and end_date:
                    try:
                        entry_time = datetime.strptime(row.get("Thoi_gian_nhap", ""), "%Y-%m-%d %H:%M:%S")
                        if not (start_date <= entry_time.date() <= end_date):
                            continue
                    except ValueError:
                        continue
                if keyword:
                    keyword = keyword.lower()
                    if not any(keyword in str(value).lower() for value in row.values()):
                        continue
                filtered_data.append((idx, row))
        return headers, filtered_data
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu ƒë√£ nh·∫≠p: {e}")
        return [], []

# --- T√¨m ki·∫øm trong sheet ---
def search_in_sheet(sh, sheet_name, keyword, column=None):
    try:
        worksheet = sh.worksheet(sheet_name)
        data = worksheet.get_all_records()
        headers = worksheet.row_values(1)
        if not keyword:
            return headers, data
        keyword = keyword.lower()
        if column == "T·∫•t c·∫£":
            filtered_data = [row for row in data if any(keyword in str(value).lower() for value in row.values())]
        else:
            clean_column = column.rstrip('*')
            filtered_data = [row for row in data if keyword in str(row.get(clean_column, '')).lower()]
        return headers, filtered_data
    except Exception as e:
        st.error(f"L·ªói khi t√¨m ki·∫øm d·ªØ li·ªáu: {e}")
        return [], []

# --- Giao di·ªán ch√≠nh ---
def main():
    # Kh·ªüi t·∫°o session state
    if 'login' not in st.session_state:
        st.session_state.login = False
    if 'username' not in st.session_state:
        st.session_state.username = ''
    if 'role' not in st.session_state:
        st.session_state.role = ''
    if 'login_attempts' not in st.session_state:
        st.session_state.login_attempts = 0
    if 'lockout_time' not in st.session_state:
        st.session_state.lockout_time = 0
    if 'show_change_password' not in st.session_state:
        st.session_state.show_change_password = False
    if 'force_change_password' not in st.session_state:
        st.session_state.force_change_password = False
    if 'edit_mode' not in st.session_state:
        st.session_state.edit_mode = False
    if 'edit_row_idx' not in st.session_state:
        st.session_state.edit_row_idx = None
    if 'edit_sheet' not in st.session_state:
        st.session_state.edit_sheet = None
    if 'selected_function' not in st.session_state:
        st.session_state.selected_function = "Nh·∫≠p li·ªáu"  # M·∫∑c ƒë·ªãnh ch·ªçn menu ƒë·∫ßu ti√™n

    # K·∫øt n·ªëi Google Sheets
    sh = connect_to_gsheets()
    if not sh:
        return

    # Ki·ªÉm tra kh√≥a t√†i kho·∫£n
    if st.session_state.lockout_time > time.time():
        st.error(f"T√†i kho·∫£n b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau {int(st.session_state.lockout_time - time.time())} gi√¢y.")
        return

    # Sidebar: Logo, ch·ªØ chi nh√°nh, v√† menu ƒëi·ªÅu h∆∞·ªõng
    st.sidebar.image("https://ruybangphuonghoang.com/wp-content/uploads/2024/10/logo-agribank-scaled.jpg", use_container_width=False, output_format="auto", caption="", width=120)
    st.sidebar.markdown('<div class="branch-text">Chi nh√°nh t·ªânh Qu·∫£ng Tr·ªã</div>', unsafe_allow_html=True)
    st.sidebar.markdown("---")
    
    st.sidebar.title("ƒêi·ªÅu h∆∞·ªõng")
    functions = ["Nh·∫≠p li·ªáu", "Xem v√† s·ª≠a d·ªØ li·ªáu", "T√¨m ki·∫øm", "ƒê·ªïi m·∫≠t kh·∫©u", "ƒêƒÉng xu·∫•t"]
    for func in functions:
        if st.sidebar.button(func, key=f"nav_{func}"):
            st.session_state.selected_function = func
    if st.sidebar.button("Hi·ªÉn th·ªã t·∫•t c·∫£", key="show_all"):
        st.session_state.selected_function = "all"

    st.title("·ª®ng d·ª•ng qu·∫£n l√Ω nh·∫≠p li·ªáu - Agribank")

    if not st.session_state.login:
        # Giao di·ªán ƒëƒÉng nh·∫≠p
        st.subheader("üîê ƒêƒÉng nh·∫≠p")
        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", max_chars=50, key="login_username")
            password = st.text_input("M·∫≠t kh·∫©u", type="password", max_chars=50, key="login_password")
            submit = st.form_submit_button("ƒêƒÉng nh·∫≠p")

            if submit:
                if st.session_state.login_attempts >= 5:
                    st.session_state.lockout_time = time.time() + 300
                    st.error("Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. T√†i kho·∫£n b·ªã kh√≥a trong 5 ph√∫t.")
                    return

                role, force_change_password = check_login(sh, username.strip(), password.strip())
                if role:
                    st.session_state.login = True
                    st.session_state.username = username.strip()
                    st.session_state.role = role
                    st.session_state.login_attempts = 0
                    st.session_state.show_change_password = force_change_password
                    st.session_state.force_change_password = force_change_password
                    st.success(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi quy·ªÅn: {role}")
                    if force_change_password:
                        st.warning("M·∫≠t kh·∫©u c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c m√£ h√≥a. Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u ngay!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.session_state.login_attempts += 1
                    st.error(f"Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u. C√≤n {5 - st.session_state.login_attempts} l·∫ßn th·ª≠.")
    else:
        # Giao di·ªán sau khi ƒëƒÉng nh·∫≠p
        st.write(f"üëã Xin ch√†o **{st.session_state.username}**! Quy·ªÅn: **{st.session_state.role}**")

        if st.session_state.selected_function == "ƒêƒÉng xu·∫•t":
            st.session_state.login = False
            st.session_state.username = ''
            st.session_state.role = ''
            st.session_state.login_attempts = 0
            st.session_state.show_change_password = False
            st.session_state.force_change_password = False
            st.session_state.edit_mode = False
            st.session_state.edit_row_idx = None
            st.session_state.edit_sheet = None
            st.session_state.selected_function = "Nh·∫≠p li·ªáu"
            st.success("ƒê√£ ƒëƒÉng xu·∫•t!")
            time.sleep(1)
            st.rerun()

        if st.session_state.selected_function in ["all", "ƒê·ªïi m·∫≠t kh·∫©u"] or st.session_state.force_change_password:
            # ƒê·ªïi m·∫≠t kh·∫©u
            st.subheader("üîí ƒê·ªïi m·∫≠t kh·∫©u")
            if st.session_state.show_change_password or not st.session_state.force_change_password:
                with st.form("change_password_form"):
                    old_password = st.text_input("M·∫≠t kh·∫©u c≈©", type="password", max_chars=50, key="old_password")
                    new_password = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", max_chars=50, key="new_password")
                    new_password2 = st.text_input("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi", type="password", max_chars=50, key="new_password2")
                    submit_change = st.form_submit_button("C·∫≠p nh·∫≠t m·∫≠t kh·∫©u")

                    if submit_change:
                        if not old_password or not new_password or not new_password2:
                            st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng.")
                        elif new_password != new_password2:
                            st.error("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.")
                        else:
                            is_valid, msg = is_strong_password(new_password)
                            if not is_valid:
                                st.error(msg)
                            else:
                                if change_password(sh, st.session_state.username, old_password, new_password):
                                    st.success("üéâ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
                                    st.session_state.login = False
                                    st.session_state.username = ''
                                    st.session_state.role = ''
                                    st.session_state.login_attempts = 0
                                    st.session_state.show_change_password = False
                                    st.session_state.force_change_password = False
                                    st.session_state.edit_mode = False
                                    time.sleep(1)
                                    st.rerun()
                                else:
                                    st.error("M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.")

        if st.session_state.selected_function in ["all", "Nh·∫≠p li·ªáu"] and not st.session_state.force_change_password:
            # Nh·∫≠p li·ªáu
            st.subheader("üìù Nh·∫≠p li·ªáu")
            input_sheets = get_input_sheets(sh)
            if not input_sheets:
                st.error("Kh√¥ng t√¨m th·∫•y sheet nh·∫≠p li·ªáu h·ª£p l·ªá.")
            else:
                selected_sheet = st.selectbox("Ch·ªçn sheet ƒë·ªÉ nh·∫≠p li·ªáu", input_sheets, key="input_sheet")
                required_columns, optional_columns = get_columns(sh, selected_sheet)
                if required_columns or optional_columns:
                    with st.form(f"input_form_{selected_sheet}"):
                        form_data = {}
                        for header in required_columns:
                            clean_header = header.rstrip('*')
                            st.markdown(f'<span class="required-label">{clean_header} (b·∫Øt bu·ªôc)</span>', unsafe_allow_html=True)
                            form_data[clean_header] = st.text_input("", key=f"{selected_sheet}_{clean_header}_input")
                        for header in optional_columns:
                            clean_header = header.rstrip('*')
                            form_data[clean_header] = st.text_input(f"{clean_header} (t√πy ch·ªçn)", key=f"{selected_sheet}_{clean_header}_input")
                        submit_data = st.form_submit_button("G·ª≠i")

                        if submit_data:
                            missing_required = [header.rstrip('*') for header in required_columns if not form_data.get(header.rstrip('*'))]
                            if missing_required:
                                st.error(f"Vui l√≤ng nh·∫≠p c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: {', '.join(missing_required)}")
                            else:
                                if add_data_to_sheet(sh, selected_sheet, form_data, st.session_state.username):
                                    st.success("üéâ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng!")
                                else:
                                    st.error("L·ªói khi nh·∫≠p d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")

        if st.session_state.selected_function in ["all", "Xem v√† s·ª≠a d·ªØ li·ªáu"] and not st.session_state.force_change_password:
            # Xem v√† s·ª≠a d·ªØ li·ªáu ƒë√£ nh·∫≠p
            st.subheader("üìä Xem v√† s·ª≠a d·ªØ li·ªáu ƒë√£ nh·∫≠p")
            view_sheets = get_view_sheets(sh)
            if not view_sheets:
                st.error("Kh√¥ng t√¨m th·∫•y sheet xem d·ªØ li·ªáu h·ª£p l·ªá.")
            else:
                selected_view_sheet = st.selectbox("Ch·ªçn sheet ƒë·ªÉ xem", view_sheets, key="view_sheet")
                col1, col2 = st.columns(2)
                with col1:
                    start_date = st.date_input("T·ª´ ng√†y", value=datetime.now().date() - timedelta(days=30), key="start_date")
                with col2:
                    end_date = st.date_input("ƒê·∫øn ng√†y", value=datetime.now().date(), key="end_date")
                search_keyword = st.text_input("T√¨m ki·∫øm b·∫£n ghi", key="view_search_keyword")
                
                headers, user_data = get_user_data(
                    sh, selected_view_sheet, st.session_state.username, st.session_state.role, start_date, end_date, search_keyword
                )
                if headers and user_data:
                    df = pd.DataFrame([row for _, row in user_data])
                    # Hi·ªÉn th·ªã b·∫£ng
                    st.dataframe(df, hide_index=True)
                    
                    # Th√™m n√∫t "S·ª≠a" cho m·ªói h√†ng
                    st.markdown("### Ch·ªçn h√†ng ƒë·ªÉ ch·ªânh s·ª≠a")
                    for idx, (row_idx, row) in enumerate(user_data):
                        if st.button(f"S·ª≠a h√†ng #{idx + 1}", key=f"edit_button_{row_idx}_{selected_view_sheet}", type="primary"):
                            st.session_state.edit_mode = True
                            st.session_state.edit_row_idx = row_idx
                            st.session_state.edit_sheet = selected_view_sheet

                    # Form ch·ªânh s·ª≠a
                    if st.session_state.edit_mode and st.session_state.edit_sheet == selected_view_sheet:
                        st.subheader(f"Ch·ªânh s·ª≠a b·∫£n ghi #{st.session_state.edit_row_idx + 2}")
                        required_columns, optional_columns = get_columns(sh, selected_view_sheet)
                        with st.form(f"edit_form_{selected_view_sheet}_{st.session_state.edit_row_idx}"):
                            edit_data = {}
                            edit_row = user_data[st.session_state.edit_row_idx][1]
                            for header in required_columns:
                                clean_header = header.rstrip('*')
                                st.markdown(f'<span class="required-label">{clean_header} (b·∫Øt bu·ªôc)</span>', unsafe_allow_html=True)
                                edit_data[clean_header] = st.text_input(
                                    "", 
                                    value=edit_row.get(clean_header, ''), 
                                    key=f"edit_{selected_view_sheet}_{clean_header}_{st.session_state.edit_row_idx}"
                                )
                            for header in optional_columns:
                                clean_header = header.rstrip('*')
                                edit_data[clean_header] = st.text_input(
                                    f"{clean_header} (t√πy ch·ªçn)", 
                                    value=edit_row.get(clean_header, ''), 
                                    key=f"edit_{selected_view_sheet}_{clean_header}_{st.session_state.edit_row_idx}"
                                )
                            submit_edit = st.form_submit_button("C·∫≠p nh·∫≠t")
                            cancel_edit = st.form_submit_button("H·ªßy")

                            if submit_edit:
                                missing_required = [header.rstrip('*') for header in required_columns if not edit_data.get(header.rstrip('*'))]
                                if missing_required:
                                    st.error(f"Vui l√≤ng nh·∫≠p c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: {', '.join(missing_required)}")
                                else:
                                    if update_data_in_sheet(sh, selected_view_sheet, st.session_state.edit_row_idx, edit_data, st.session_state.username):
                                        st.success("üéâ B·∫£n ghi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                                        st.session_state.edit_mode = False
                                        st.session_state.edit_row_idx = None
                                        st.session_state.edit_sheet = None
                                        st.rerun()
                                    else:
                                        st.error("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")
                            if cancel_edit:
                                st.session_state.edit_mode = False
                                st.session_state.edit_row_idx = None
                                st.session_state.edit_sheet = None
                                st.rerun()
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c nh·∫≠p trong kho·∫£ng th·ªùi gian ho·∫∑c t·ª´ kh√≥a n√†y.")

        if st.session_state.selected_function in ["all", "T√¨m ki·∫øm"] and not st.session_state.force_change_password:
            # T√¨m ki·∫øm
            st.subheader("üîç T√¨m ki·∫øm")
            lookup_sheets = get_lookup_sheets(sh)
            if not lookup_sheets:
                st.error("Kh√¥ng t√¨m th·∫•y sheet tra c·ª©u h·ª£p l·ªá.")
            else:
                selected_lookup_sheet = st.selectbox("Ch·ªçn sheet ƒë·ªÉ t√¨m ki·∫øm", lookup_sheets, key="lookup_sheet")
                headers = [h.rstrip('*') for h in get_columns(sh, selected_lookup_sheet)[0]] + get_columns(sh, selected_lookup_sheet)[1]
                search_column = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ t√¨m ki·∫øm", ["T·∫•t c·∫£"] + headers, key="search_column")
                keyword = st.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm", key="search_keyword")
                if st.button("T√¨m ki·∫øm", key="search_button"):
                    headers, search_results = search_in_sheet(sh, selected_lookup_sheet, keyword, search_column)
                    if headers and search_results:
                        df = pd.DataFrame(search_results)
                        st.dataframe(df)
                    else:
                        st.info("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o kh·ªõp v·ªõi t·ª´ kh√≥a.")

if __name__ == "__main__":
    main()