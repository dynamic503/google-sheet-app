import streamlit as st
import hashlib
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import time

# --- K·∫øt n·ªëi Google Sheets ---
def connect_to_gsheets():
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        sheet_id = os.getenv("SHEET_ID")
        
        if not creds_json or not sheet_id:
            st.error("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_CREDENTIALS_JSON ho·∫∑c SHEET_ID")
            return None
        
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        return client.open_by_key(sheet_id)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

# --- Ki·ªÉm tra xem chu·ªói ƒë√£ m√£ h√≥a SHA256 ch∆∞a ---
def is_hashed(pw):
    # Ki·ªÉm tra n·∫øu pw l√† chu·ªói v√† c√≥ ƒë·ªãnh d·∫°ng SHA256
    return isinstance(pw, str) and len(pw) == 64 and re.fullmatch(r'[0-9a-fA-F]+', pw)

# --- H√†m m√£ h√≥a m·∫≠t kh·∫©u ---
def hash_password(password):
    return hashlib.sha256(str(password).encode('utf-8')).hexdigest() if password else ''

# --- Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u ---
def is_strong_password(password):
    if len(str(password)) < 8:
        return False, "M·∫≠t kh·∫©u ph·∫£i d√†i √≠t nh·∫•t 8 k√Ω t·ª±."
    if not re.search(r'[A-Z]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ c√°i in hoa."
    if not re.search(r'[0-9]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ªë."
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát."
    return True, ""

# --- L·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ sheet "User" v√† t·ª± ƒë·ªông hash n·∫øu ch∆∞a ---
def get_users(sh):
    try:
        worksheet = sh.worksheet("User")
        data = worksheet.get_all_records()
        updated = False

        for idx, user in enumerate(data):
            pw = user.get('Password', '')
            if not pw:  # B·ªè qua n·∫øu √¥ Password tr·ªëng
                continue

            # Chuy·ªÉn ƒë·ªïi pw th√†nh chu·ªói n·∫øu n√≥ kh√¥ng ph·∫£i chu·ªói
            pw = str(pw)
            if not is_hashed(pw):
                hashed = hash_password(pw)
                worksheet.update_cell(idx + 2, 2, hashed)
                user['Password'] = hashed
                updated = True

        if updated:
            st.success("ƒê√£ t·ª± ƒë·ªông m√£ h√≥a c√°c m·∫≠t kh·∫©u ch∆∞a hash.")
        
        return data
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")
        return []

# --- X√°c th·ª±c ng∆∞·ªùi d√πng ---
def check_login(sh, username, password):
    if not username or not password:
        return None
    users = get_users(sh)
    hashed_input = hash_password(password)
    for user in users:
        if user.get('Username') == username and user.get('Password') == hashed_input:
            return user.get('Role', 'User')
    return None

# --- ƒê·ªïi m·∫≠t kh·∫©u ---
def change_password(sh, username, old_pw, new_pw):
    try:
        worksheet = sh.worksheet("User")
        data = worksheet.get_all_records()
        hashed_old = hash_password(old_pw)
        hashed_new = hash_password(new_pw)

        for idx, user in enumerate(data):
            if user.get('Username') == username and user.get('Password') == hashed_old:
                worksheet.update_cell(idx + 2, 2, hashed_new)
                return True
        return False
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: {e}")
        return False

# --- Giao di·ªán ch√≠nh ---
def main():
    st.set_page_config(page_title="Qu·∫£n l√Ω ƒêƒÉng nh·∫≠p", page_icon="üîê")
    st.title("·ª®ng d·ª•ng qu·∫£n l√Ω - ƒêƒÉng nh·∫≠p")

    # Kh·ªüi t·∫°o session state
    if 'login' not in st.session_state:
        st.session_state.login = False
    if 'username' not in st.session_state:
        st.session_state.username = ''
    if 'role' not in st.session_state:
        st.session_state.role = ''
    if 'login_attempts' not in st.session_state:
        st.session_state.login_attempts = 0
    if 'lockout_time' not in st.session_state:
        st.session_state.lockout_time = 0

    # Ki·ªÉm tra kh√≥a t√†i kho·∫£n
    if st.session_state.lockout_time > time.time():
        st.error(f"T√†i kho·∫£n b·ªã kh√≥a. Th·ª≠ l·∫°i sau {int(st.session_state.lockout_time - time.time())} gi√¢y.")
        return

    if not st.session_state.login:
        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", max_chars=50)
            password = st.text_input("M·∫≠t kh·∫©u", type="password", max_chars=50)
            submit = st.form_submit_button("ƒêƒÉng nh·∫≠p")

            if submit:
                if st.session_state.login_attempts >= 5:
                    st.session_state.lockout_time = time.time() + 300  # Kh√≥a 5 ph√∫t
                    st.error("Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. T√†i kho·∫£n b·ªã kh√≥a trong 5 ph√∫t.")
                    return

                sh = connect_to_gsheets()
                if not sh:
                    return

                role = check_login(sh, username.strip(), password)
                if role:
                    st.session_state.login = True
                    st.session_state.username = username.strip()
                    st.session_state.role = role
                    st.session_state.login_attempts = 0
                    st.success(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi quy·ªÅn: {role}")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.session_state.login_attempts += 1
                    st.error(f"Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u. C√≤n {5 - st.session_state.login_attempts} l·∫ßn th·ª≠.")
    else:
        st.write(f"üëã Xin ch√†o **{st.session_state.username}**! Quy·ªÅn: **{st.session_state.role}**")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("ƒêƒÉng xu·∫•t"):
                st.session_state.login = False
                st.session_state.username = ''
                st.session_state.role = ''
                st.session_state.login_attempts = 0
                st.success("ƒê√£ ƒëƒÉng xu·∫•t!")
                time.sleep(1)
                st.rerun()

        st.subheader("üîí ƒê·ªïi m·∫≠t kh·∫©u")
        with st.form("change_password_form"):
            old_pw = st.text_input("M·∫≠t kh·∫©u c≈©", type="password", max_chars=50)
            new_pw = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", max_chars=50)
            new_pw2 = st.text_input("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi", type="password", max_chars=50)
            submit_change = st.form_submit_button("C·∫≠p nh·∫≠t m·∫≠t kh·∫©u")

            if submit_change:
                if not old_pw or not new_pw or not new_pw2:
                    st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng.")
                elif new_pw != new_pw2:
                    st.error("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.")
                else:
                    is_strong, msg = is_strong_password(new_pw)
                    if not is_strong:
                        st.error(msg)
                    else:
                        sh = connect_to_gsheets()
                        if not sh:
                            return
                        if change_password(sh, st.session_state.username, old_pw, new_pw):
                            st.success("üéâ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
                            time.sleep(1)
                            st.session_state.login = False
                            st.session_state.username = ''
                            st.session_state.role = ''
                            st.rerun()
                        else:
                            st.error("M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.")

if __name__ == "__main__":
    main()
