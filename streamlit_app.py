import streamlit as st
import hashlib
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import time
from datetime import datetime
import pandas as pd

# --- K·∫øt n·ªëi Google Sheets ---
def connect_to_gsheets():
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
        sheet_id = os.getenv("SHEET_ID")
        
        if not creds_json or not sheet_id:
            st.error("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_CREDENTIALS_JSON ho·∫∑c SHEET_ID")
            return None
        
        creds_dict = json.loads(creds_json)
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        return client.open_by_key(sheet_id)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

# --- Ki·ªÉm tra xem chu·ªói ƒë√£ m√£ h√≥a SHA256 ch∆∞a ---
def is_hashed(pw):
    return isinstance(pw, str) and len(pw) == 64 and re.fullmatch(r'[0-9a-fA-F]+', pw)

# --- H√†m m√£ h√≥a m·∫≠t kh·∫©u ---
def hash_password(password):
    return hashlib.sha256(str(password).encode('utf-8')).hexdigest() if password else ''

# --- Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u ---
def is_strong_password(password):
    if len(str(password)) < 8:
        return False, "M·∫≠t kh·∫©u ph·∫£i d√†i √≠t nh·∫•t 8 k√Ω t·ª±."
    if not re.search(r'[A-Z]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ c√°i in hoa."
    if not re.search(r'[0-9]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ªë."
    if not re.search(r'[!@#$%^&*(),.?":{}|<>]', str(password)):
        return False, "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát."
    return True, ""

# --- L·∫•y danh s√°ch ng∆∞·ªùi d√πng t·ª´ sheet "User" ---
def get_users(sh):
    try:
        worksheet = sh.worksheet("User")
        data = worksheet.get_all_records()
        return data
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng: {e}")
        return []

# --- X√°c th·ª±c ng∆∞·ªùi d√πng ---
def check_login(sh, username, password):
    if not username or not password:
        st.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
        return None, False
    users = get_users(sh)
    hashed_input = hash_password(password)
    for user in users:
        stored_password = str(user.get('Password', ''))
        if user.get('Username') == username:
            # Ki·ªÉm tra m·∫≠t kh·∫©u th√¥
            if stored_password == password:
                return user.get('Role', 'User'), True  # True: b·∫Øt bu·ªôc ƒë·ªïi m·∫≠t kh·∫©u
            # Ki·ªÉm tra m·∫≠t kh·∫©u hash
            if stored_password == hashed_input:
                return user.get('Role', 'User'), False  # False: kh√¥ng c·∫ßn ƒë·ªïi
    return None, False

# --- ƒê·ªïi m·∫≠t kh·∫©u ---
def change_password(sh, username, old_pw, new_pw):
    try:
        worksheet = sh.worksheet("User")
        data = worksheet.get_all_records()
        hashed_old = hash_password(old_pw)
        hashed_new = hash_password(new_pw)

        for idx, user in enumerate(data):
            stored_password = str(user.get('Password', ''))
            if user.get('Username') == username and (stored_password == old_pw or stored_password == hashed_old):
                worksheet.update_cell(idx + 2, 2, hashed_new)
                return True
        return False
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: {e}")
        return False

# --- L·∫•y danh s√°ch sheet nh·∫≠p li·ªáu (ch·ªâ NhapThongTinDichVu v√† NhapThongTinKHTiemNangMoi) ---
def get_input_sheets(sh):
    try:
        valid_sheets = ["NhapThongTinDichVu", "NhapThongTinKHTiemNangMoi"]
        sheets = [ws.title for ws in sh.worksheets() if ws.title in valid_sheets]
        return sheets
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y danh s√°ch sheet: {e}")
        return []

# --- L·∫•y ti√™u ƒë·ªÅ c·ªôt t·ª´ sheet ---
def get_columns(sh, sheet_name):
    try:
        worksheet = sh.worksheet(sheet_name)
        headers = worksheet.row_values(1)
        return headers
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y ti√™u ƒë·ªÅ c·ªôt: {e}")
        return []

# --- Th√™m d·ªØ li·ªáu v√†o sheet ---
def add_data_to_sheet(sh, sheet_name, data, username):
    try:
        worksheet = sh.worksheet(sheet_name)
        headers = worksheet.row_values(1)
        # Th√™m c·ªôt Nguoi nhap v√† Thoi gian nhap n·∫øu ch∆∞a c√≥
        if "Nguoi nhap" not in headers:
            headers.append("Nguoi nhap")
            worksheet.update_cell(1, len(headers), "Nguoi nhap")
        if "Thoi gian nhap" not in headers:
            headers.append("Thoi gian nhap")
            worksheet.update_cell(1, len(headers), "Thoi gian nhap")
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ th√™m
        row_data = [data.get(header, '') for header in headers[:-2]]  # L·∫•y d·ªØ li·ªáu tr·ª´ 2 c·ªôt cu·ªëi
        row_data.append(username)  # Th√™m Nguoi nhap
        row_data.append(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))  # Th√™m Thoi gian nhap
        worksheet.append_row(row_data)
        return True
    except Exception as e:
        st.error(f"L·ªói khi nh·∫≠p li·ªáu: {e}")
        return False

# --- L·∫•y d·ªØ li·ªáu ƒë√£ nh·∫≠p theo username ---
def get_user_data(sh, sheet_name, username):
    try:
        worksheet = sh.worksheet(sheet_name")
        data = worksheet.get_all_records()
        headers = worksheet.row_values(1)
        filtered_data = [row for row in data if row.get("Nguoi nhap") == username]
        return headers, filtered_data
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu ƒë√£ nh·∫≠p: {e}")
        return [], []

# --- Giao di·ªán ch√≠nh ---
def main():
    st.set_page_config(page_title="Qu·∫£n l√Ω nh·∫≠p li·ªáu", page_icon="üíª")
    st.title("·ª®ng d·ª•ng qu·∫£n l√Ω nh·∫≠p li·ªáu")

    # Kh·ªüi t·∫°o session state
    if 'login' not in st.session_state:
        st.session_state.login = False
    if 'username' not in st.session_state:
        st.session_state.username = ''
    if 'role' not in st.session_state:
        st.session_state.role = ''
    if 'login_attempts' not in st.session_state:
        st.session_state.login_attempts = 0
    if 'lockout_time' not in st.session_state:
        st.session_state.lockout_time = 0
    if 'show_change_password' not in st.session_state:
        st.session_state.show_change_password = False
    if 'force_change_password' not in st.session_state:
        st.session_state.force_change_password = False

    # K·∫øt n·ªëi Google Sheets
    sh = connect_to_gsheets()
    if not sh:
        return

    # Ki·ªÉm tra kh√≥a t√†i kho·∫£n
    if st.session_state.lockout_time > time.time():
        st.error(f"T√°i kho·∫£n b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau {int(st.session_state.lockout_time - time.time())} gi√¢y.")
        return

    if not st.session_state.login:
        # Giao di·ªán ƒëƒÉng nh·∫≠p
        with st.form("login_form"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", max_chars=50)
            password = st.text_input("M·∫≠t kh·∫©u", type="password", max_chars=50)
            submit = st.form_submit_button("ƒêƒÉng nh·∫≠p")

            if submit:
                if st.session_state.login_attempts >= 5:
                    st.session_state.lockout_time = time.time() + 360
                    st.error("Qu√° nhi·ªÅu l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p. T√†i kho·∫£n b·ªã kh√≥a trong 5 ph√∫t.")
                    return

                role, force_change_password = check_login(sh, username.strip(), password.strip())
                if role:
                    st.session_state.login = True
                    st.session_state.username = username.strip()
                    st.session_state.role = role
                    st.session_state.login_attempts = 0
                    st.session_state.show_change_password = force_change_password
                    st.session_state.force_change_password = force_change_password
                    st.success(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi quy·ªÅn: {role}")
                    if force_change_password:
                        st.warning("M·∫≠t kh·∫©u c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c m√£ h√≥a. Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u ngay!")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.session_state.login_attempts += 1
                    st.error(f"Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u. C√≤n {5 - st.session_state.login_attempts} l·∫ßn th·ª≠.")

    else:
        # Giao di·ªán sau khi ƒëƒÉng nh·∫≠p
        st.write(f"üëã Xin ch√†o **{st.session_state.username}**! Quy·ªÅn: **{st.session_state.role}**")

        # Form ƒë·ªïi m·∫≠t kh·∫©u n·∫øu c·∫ßn)
        if st.session_state.show_change_password:
            st.subheader("üîí ƒê·ªïi m·∫≠t kh·∫©u")
            with st.form("change_password_form"):
                old_password = st.text_input("M·∫≠t kh·∫©u c≈©", type="password", max_chars=50)
                new_password = st.text_input("M·∫≠t kh·∫©u m·ªõi", type="password", max_chars=50)
                new_password2 = st.text_input("Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi", type="password", max_chars=50)
                submit_change = st.form_submit_button("C·∫≠p nh·∫≠t m·∫≠t kh·∫©u")

                if submit_change:
                    if not old_password or not new_password or not new_password2:
                        st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng.")
                    elif new_password != new_password2:
                        st.error("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.")
                    else:
                        is_valid, msg = is_strong_password(new_password)
                        if not is_valid:
                            st.error(msg)
                        else:
                            if change_password(sh, st.session_state.username,, old_password, new_password):
                                st.success("üéâ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
                                st.session_state.login = False
                                st.session_state.username = ''
                                st.session_state.role = ''
                                st.session_state.login_attempts = 0
                                st.session_state.show_change_password = False
                                st.session_state.force_change_password = False
                                time.sleep(1)
                                st.rerun()
                            else:
                                st.error("M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.")

        # Sidebar ƒë·ªÉ ch·ªçn ch·ª©c nƒÉng
        if not st.session_state.force_change_password:
            st.sidebar.title("Ch·ª©c nƒÉng")
            option = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng", ["Nh·∫≠p li·ªáu", "Xem d·ªØ li·ªáu ƒë√£ nh·∫≠p", "ƒê·ªïi m·∫≠t kh·∫©u", "ƒêƒÉng xu·∫•t"])

            if option == "ƒê·ªïi m·∫≠t kh·∫©u":
                st.session_state.show_change_password = True
                st.rerun()
            elif option == "ƒêƒÉng xu·∫•t":
                st.session_state.login = False
                st.session_state.username = ''
                st.session_state.role = ''
                st.session_state.login_attempts = 0
                st.session_state.show_change_password = False
                st.session_state.force_change_password = False
                st.success("ƒê√£ ƒëƒÉng xu·∫•t!")
                time.sleep(1)
                st.rerun()
            elif option == "Nh·∫≠p li·ªáu":
                # Ch·ªçn sheet ƒë·ªÉ nh·∫≠p li·ªáu
                st.subheader("üìù Nh·∫≠p li·ªáu")
                input_sheets = get_input_sheets(sh)
                if not input_sheets:
                    st.error("Kh√¥ng t√¨m th·∫•y sheet nh·∫≠p li·ªáu h·ª£p l·ªá.")
                    return
                selected_sheet = st.selectbox("Ch·ªçn sheet ƒë·ªÉ nh·∫≠p li·ªáu", input_sheets)

                # T·∫°o form nh·∫≠p li·ªáu
                headers = get_columns(sh, selected_sheet)
                if headers:
                    with st.form(f"input_form_{selected_sheet}"):
                        form_data = {}
                        for header in headers:
                            if header not in ["Nguoi nhap", "Thoi gian nhap"]:
                                form_data[header] = st.text_input(header, key=f"{selected_sheet}_{header}")
                        submit_data = st.form_submit_button("G·ª≠i")

                        if submit_data:
                            if all(form_data.values()):
                                if add_data_to_sheet(sh, selected_sheet, form_data, st.session_state.username):
                                    st.success("üéâ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c nh·∫≠p th√†nh c√¥ng!")
                                else:
                                    st.error("L·ªói khi nh·∫≠p d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")
                            else:
                                st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c tr∆∞·ªùng.")

            elif option == "Xem d·ªØ li·ªáu ƒë√£ nh·∫≠p":
                # Xem d·ªØ li·ªáu ƒë√£ nh·∫≠p
                st.subheader("üìä D·ªØ li·ªáu ƒë√£ nh·∫≠p")
                input_sheets = get_input_sheets(sh)
                if not input_sheets:
                    st.error("Kh√¥ng t√¨m th·∫•y sheet nh·∫≠p li·ªáu h·ª£p l·ªá.")
                    return
                selected_sheet = st.selectbox("Ch·ªçn sheet ƒë·ªÉ xem", input_sheets)

                headers, user_data = get_user_data(sh, selected_sheet, st.session_state.username)
                if headers and user_data:
                    df = pd.DataFrame(user_data)
                    st.dataframe(df)
                else:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c nh·∫≠p b·ªüi b·∫°n trong sheet n√†y.")

if __name__ == "__main__":
    main()
